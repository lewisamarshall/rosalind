class Sequence(object):

    _sequence = None
    __bases = ('A', 'C', 'T', 'G')

    def __init__(self, sequence):
        self._sequence = sequence

    def count(self, base=None):
        if base is None:
            return {base: self._sequence.count(base)
                    for base in self.__bases}
        else:
            assert base in self.__bases, "{} is not a valid base.".format(base)
            return self._sequence.count(base)

if __name__ == '__main__':
    seq = Sequence('GTGGGCCTATAAGAGGGCGTACGGAGAAGGGCAGTCGGAATTCTAGCGCGACCGCGCGCGCTGTTAAACCAGGTGTCCGCATGCTATACATCACGCTGTATATGGGTTTCACCTGGGGATAGCGTACGATGTGTCTCCTGACCATGCTCTGAGGCGTGGACTGAACCTACGGCGCCCGCGTCCATACAAGCCCTCCTGTTCGTCGAAGGCTGCAACCGCGATTAACAGAGAACTGGCGTGGCCGTTAATGTCGTCTAAGCCCATTTAAGTTTGTGGCTTCGGTTGAGAGGACGTCCAAAGCTCCCGGCTTGAGGATCCGCCAGGACTTGCATCTGAGCAATATTACTCCTGCCAATGTACAGCTGATGCGGCATCCCGGAATCGGGATGGCTGACTTGGCGTCTGTTGTTACCCGCCTCAGCCAAGCTTAACGCACACACGTCGGGACCAACGGCTGGTTAATCCCGACCGGGTTGGGCCGGCGTGCATGTAGCCAGTCCATTGTAGGTTCGCCACTCCGGCTCCGAGACTGGTCCAGATATAGGAGATCCCTGGAGGTCGCGTTGGCCTGGGCAGAATATATAGTTCTCCGAGCGGAAACTAACCCCAGAATCGTACCGGCCAAGGGATAGCCCGCTCTGATGTTGTCTTAGGTGCGAGCAGTCAAACGATCTTCTTTCTACTAGGGACCCGGAAGAGCGTGTCATTGTTGGCGGTAAACTTAATTACAAATGAAATACATGTTGACAAAGGGCGGCTCTTTTTCCGGCGAGTCTCCTTCATAAATGCCGATGGAGGAACCAGTTCCAGCGCATGATGGTTCATCCGAAATAGAATTACTATCGAGGTAACCGCCCCGTCGCGGGGAGAAAGGAGTGCCTAATTATACCGCCCATCGTAACTCCGGT')
    count = seq.count()
    print(count['A'], count['C'], count['G'], count['T'])
    print(seq.count('A'))
